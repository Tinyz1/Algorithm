package com.algorithm.easy;

/**
 * Created by TangZz on 2018/5/4.
 * 给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。
 * <p>
 * 不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。
 * <p>
 * 示例 1:
 * <p>
 * 给定数组 nums = [1,1,2],
 * <p>
 * 函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。
 * <p>
 * 你不需要考虑数组中超出新长度后面的元素。
 * 示例 2:
 * <p>
 * 给定 nums = [0,0,1,1,1,2,2,3,3,4],
 * <p>
 * 函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。
 * <p>
 * 你不需要考虑数组中超出新长度后面的元素。
 * 说明:
 * <p>
 * 为什么返回数值是整数，但输出的答案是数组呢?
 * <p>
 * 请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。
 * <p>
 * 你可以想象内部操作如下:
 * <p>
 * // nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝
 * int len = removeDuplicates(nums);
 * <p>
 * // 在函数里修改输入数组对于调用者是可见的。
 * // 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。
 * for (int i = 0; i < len; i++) {
 * print(nums[i]);
 * }
 */
public class RemoveDuplicates {


    /**
     * 最优代码分析
     * 1.判断数据是否为null
     * 2.空数组和长度为1的数组 直接返回长度
     * 3.设置新数组的下标，判断新数组下标中的值是否和下一个值相等
     * 4.不相等就赋值给新增数组下标，++index
     * 5.最后的数组长度就是下标+1（index从0开始）
     */
    public int removeDuplicatesPre(int[] nums) {
        if (nums == null) {
            return 0;
        }
        if (nums.length <= 1) {
            return nums.length;
        }
        // 新数组的下标
        int index = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[index] != nums[i]) {
                // 数组第i个元素和新数组第index不相等时，需要将下标为i的元素值放到新数组index+1位置
                nums[++index] = nums[i];
            }
        }
        // 循环结束计算出新数组最后一个元素的下标index；so数组的长度为index+1
        return index + 1;
    }


    public int removeDuplicates(int[] nums) {
        if (null == nums || nums.length < 1) {
            return 0;
        } else if (1 == nums.length) {
            return 1;
        }
        int num = nums[0];
        int index = 1;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] > num) {
                nums[index] = nums[i];
                num = nums[i];
                index++;
            }
        }
        return index--;
    }

    public static void main(String[] args) {
        int[] nums = {};
//        int[] nums = {1};
        System.out.println(new RemoveDuplicates().removeDuplicates(nums));
        for (int num : nums) {
            System.out.println(num);
        }

    }
}
